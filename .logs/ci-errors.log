Run echo "[CI: coverage]"
  echo "[CI: coverage]"
  python -m pytest -q -s \
    --cov=cns_py \
    --cov-report=xml \
    --cov-report=html \
    --cov-report=term-missing:skip-covered \
    --cov-fail-under=85 \
    --hypothesis-show-statistics \
    --hypothesis-seed=123456
  echo "threshold=85; actual=$(grep -oP 'TOTAL.*?\K\d+' coverage.xml | head -1)%; report=artifacts/coverage-html/index.html"
  shell: /usr/bin/bash -e {0}
  env:
    pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
    PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
    Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
    Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
    Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
    LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
    CNS_DB_HOST: 127.0.0.1
    CNS_DB_PORT: 5433
    CNS_DB_NAME: cns
    CNS_DB_USER: cns
    CNS_DB_PASSWORD: cns
    CNS_VECTOR_DIMS: 1536
[CI: coverage]
Initialized schema (atoms, fibers, aspects) and pgvector extension.
Demo data ingested: FrameworkX â†’ TLS1.2 before 2025, TLS1.3 after 2025.
Database connection successful on attempt 1
[CONFTEST] Data verification: 3 atoms, 2 fibers, 2 aspects
[CONFTEST] Aspect data:
  ('fiber', 1, None, datetime.datetime(2025, 1, 1, 0, 0, tzinfo=zoneinfo.ZoneInfo(key='Etc/UTC')), 0.95)
  ('fiber', 2, datetime.datetime(2025, 1, 1, 0, 0, tzinfo=zoneinfo.ZoneInfo(key='Etc/UTC')), None, 0.98)
[CONFTEST] Fiber data:
  Fiber 1: FrameworkX --supports_tls--> TLS1.2
  Fiber 2: FrameworkX --supports_tls--> TLS1.3
[CONFTEST] JOIN test (FrameworkX fibers with aspects):
  Fiber 1: FrameworkX --supports_tls--> TLS1.2, valid_from=None, valid_to=2025-01-01 00:00:00+00:00, belief=0.95
  Fiber 2: FrameworkX --supports_tls--> TLS1.3, valid_from=2025-01-01 00:00:00+00:00, valid_to=None, belief=0.98
........[CQL DEBUG] SQL: SELECT a_src.label AS subject_label, f.predicate AS predicate, a_dst.label AS object_label, COALESCE(asp.belief, 0.0) AS base_confidence, asp.observed_at AS observed_at, asp.provenance AS provenance_json, f.id AS fiber_id FROM fibers f JOIN atoms a_src ON a_src.id = f.src JOIN atoms a_dst ON a_dst.id = f.dst JOIN aspects asp ON asp.subject_kind='fiber' AND asp.subject_id=f.id WHERE a_src.label = %(label)s AND f.predicate = %(predicate)s ORDER BY COALESCE(asp.belief, 0.0) DESC LIMIT 100
[CQL DEBUG] Params: {'label': 'TestFrameworkY', 'predicate': 'supports_tls'}
[CQL DEBUG] Rows returned: 2
.[CQL DEBUG] SQL: SELECT a_src.label AS subject_label, f.predicate AS predicate, a_dst.label AS object_label, COALESCE(asp.belief, 0.0) AS base_confidence, asp.observed_at AS observed_at, asp.provenance AS provenance_json, f.id AS fiber_id FROM fibers f JOIN atoms a_src ON a_src.id = f.src JOIN atoms a_dst ON a_dst.id = f.dst JOIN aspects asp ON asp.subject_kind='fiber' AND asp.subject_id=f.id WHERE a_src.label = %(label)s AND f.predicate = %(predicate)s AND COALESCE(asp.valid_from, '-infinity'::timestamptz) <= %(ts_from)s AND COALESCE(asp.valid_to,   'infinity'::timestamptz)  >  %(ts_to)s ORDER BY COALESCE(asp.belief, 0.0) DESC LIMIT 100
[CQL DEBUG] Params: {'label': 'TestFrameworkY', 'predicate': 'supports_tls', 'ts_from': datetime.datetime(2025, 7, 9, 18, 16, 20, 552756, tzinfo=tzutc()), 'ts_to': datetime.datetime(2025, 7, 9, 18, 16, 20, 552756, tzinfo=tzutc())}
[CQL DEBUG] Rows returned: 0
..[CQL DEBUG] SQL: SELECT a_src.label AS subject_label, f.predicate AS predicate, a_dst.label AS object_label, COALESCE(asp.belief, 0.0) AS base_confidence, asp.observed_at AS observed_at, asp.provenance AS provenance_json, f.id AS fiber_id FROM fibers f JOIN atoms a_src ON a_src.id = f.src JOIN atoms a_dst ON a_dst.id = f.dst JOIN aspects asp ON asp.subject_kind='fiber' AND asp.subject_id=f.id WHERE a_src.label = %(label)s AND f.predicate = %(predicate)s ORDER BY COALESCE(asp.belief, 0.0) DESC LIMIT 100
[CQL DEBUG] Params: {'label': 'TestFrameworkY', 'predicate': 'supports_tls'}
[CQL DEBUG] Rows returned: 2
..[CQL DEBUG] Test SQL: SELECT a_src.label AS subject_label, f.predicate AS predicate, a_dst.label AS object_label, COALESCE(asp.belief, 0.0) AS base_confidence, asp.observed_at AS observed_at, asp.provenance AS provenance_json, f.id AS fiber_id FROM fibers f JOIN atoms a_src ON a_src.id = f.src JOIN atoms a_dst ON a_dst.id = f.dst JOIN aspects asp ON asp.subject_kind='fiber' AND asp.subject_id=f.id WHERE a_src.label = %(label)s AND f.predicate = %(predicate)s
[CQL DEBUG] Test params: {'label': 'FrameworkX', 'predicate': 'supports_tls'}
[CQL DEBUG] Without temporal filter: 0 rows
[CQL DEBUG] SQL: SELECT a_src.label AS subject_label, f.predicate AS predicate, a_dst.label AS object_label, COALESCE(asp.belief, 0.0) AS base_confidence, asp.observed_at AS observed_at, asp.provenance AS provenance_json, f.id AS fiber_id FROM fibers f JOIN atoms a_src ON a_src.id = f.src JOIN atoms a_dst ON a_dst.id = f.dst JOIN aspects asp ON asp.subject_kind='fiber' AND asp.subject_id=f.id WHERE a_src.label = %(label)s AND f.predicate = %(predicate)s AND COALESCE(asp.valid_from, '-infinity'::timestamptz) <= %(ts_from)s AND COALESCE(asp.valid_to,   'infinity'::timestamptz)  >  %(ts_to)s ORDER BY COALESCE(asp.belief, 0.0) DESC LIMIT 100
[CQL DEBUG] Params: {'label': 'FrameworkX', 'predicate': 'supports_tls', 'ts_from': datetime.datetime(2025, 1, 1, 0, 0, tzinfo=tzutc()), 'ts_to': datetime.datetime(2025, 1, 1, 0, 0, tzinfo=tzutc())}
[CQL DEBUG] Rows returned: 0
F[CQL DEBUG] Test SQL: SELECT a_src.label AS subject_label, f.predicate AS predicate, a_dst.label AS object_label, COALESCE(asp.belief, 0.0) AS base_confidence, asp.observed_at AS observed_at, asp.provenance AS provenance_json, f.id AS fiber_id FROM fibers f JOIN atoms a_src ON a_src.id = f.src JOIN atoms a_dst ON a_dst.id = f.dst JOIN aspects asp ON asp.subject_kind='fiber' AND asp.subject_id=f.id WHERE a_src.label = %(label)s AND f.predicate = %(predicate)s
[CQL DEBUG] Test params: {'label': 'FrameworkX', 'predicate': 'supports_tls'}
[CQL DEBUG] Without temporal filter: 0 rows
[CQL DEBUG] SQL: SELECT a_src.label AS subject_label, f.predicate AS predicate, a_dst.label AS object_label, COALESCE(asp.belief, 0.0) AS base_confidence, asp.observed_at AS observed_at, asp.provenance AS provenance_json, f.id AS fiber_id FROM fibers f JOIN atoms a_src ON a_src.id = f.src JOIN atoms a_dst ON a_dst.id = f.dst JOIN aspects asp ON asp.subject_kind='fiber' AND asp.subject_id=f.id WHERE a_src.label = %(label)s AND f.predicate = %(predicate)s AND COALESCE(asp.valid_from, '-infinity'::timestamptz) <= %(ts_from)s AND COALESCE(asp.valid_to,   'infinity'::timestamptz)  >  %(ts_to)s AND COALESCE(asp.belief, 0.0) >= %(belief_ge)s ORDER BY COALESCE(asp.belief, 0.0) DESC LIMIT 100
[CQL DEBUG] Params: {'label': 'FrameworkX', 'predicate': 'supports_tls', 'ts_from': datetime.datetime(2025, 1, 1, 0, 0, tzinfo=tzutc()), 'ts_to': datetime.datetime(2025, 1, 1, 0, 0, tzinfo=tzutc()), 'belief_ge': 0.97}
[CQL DEBUG] Rows returned: 0
F[CQL DEBUG] Test SQL: SELECT a_src.label AS subject_label, f.predicate AS predicate, a_dst.label AS object_label, COALESCE(asp.belief, 0.0) AS base_confidence, asp.observed_at AS observed_at, asp.provenance AS provenance_json, f.id AS fiber_id FROM fibers f JOIN atoms a_src ON a_src.id = f.src JOIN atoms a_dst ON a_dst.id = f.dst JOIN aspects asp ON asp.subject_kind='fiber' AND asp.subject_id=f.id WHERE a_src.label = %(label)s AND f.predicate = %(predicate)s
[CQL DEBUG] Test params: {'label': 'FrameworkX', 'predicate': 'supports_tls'}
[CQL DEBUG] Without temporal filter: 0 rows
[CQL DEBUG] SQL: SELECT a_src.label AS subject_label, f.predicate AS predicate, a_dst.label AS object_label, COALESCE(asp.belief, 0.0) AS base_confidence, asp.observed_at AS observed_at, asp.provenance AS provenance_json, f.id AS fiber_id FROM fibers f JOIN atoms a_src ON a_src.id = f.src JOIN atoms a_dst ON a_dst.id = f.dst JOIN aspects asp ON asp.subject_kind='fiber' AND asp.subject_id=f.id WHERE a_src.label = %(label)s AND f.predicate = %(predicate)s AND COALESCE(asp.valid_from, '-infinity'::timestamptz) <= %(ts_from)s AND COALESCE(asp.valid_to,   'infinity'::timestamptz)  >  %(ts_to)s AND COALESCE(asp.belief, 0.0) >= %(belief_ge)s ORDER BY COALESCE(asp.belief, 0.0) DESC LIMIT 100
[CQL DEBUG] Params: {'label': 'FrameworkX', 'predicate': 'supports_tls', 'ts_from': datetime.datetime(2025, 1, 1, 0, 0, tzinfo=tzutc()), 'ts_to': datetime.datetime(2025, 1, 1, 0, 0, tzinfo=tzutc()), 'belief_ge': 0.9999}
[CQL DEBUG] Rows returned: 0
.[CQL DEBUG] Test SQL: SELECT a_src.label AS subject_label, f.predicate AS predicate, a_dst.label AS object_label, COALESCE(asp.belief, 0.0) AS base_confidence, asp.observed_at AS observed_at, asp.provenance AS provenance_json, f.id AS fiber_id FROM fibers f JOIN atoms a_src ON a_src.id = f.src JOIN atoms a_dst ON a_dst.id = f.dst JOIN aspects asp ON asp.subject_kind='fiber' AND asp.subject_id=f.id WHERE a_src.label = %(label)s AND f.predicate = %(predicate)s
[CQL DEBUG] Test params: {'label': 'FrameworkX', 'predicate': 'supports_tls'}
[CQL DEBUG] Without temporal filter: 0 rows
[CQL DEBUG] SQL: SELECT a_src.label AS subject_label, f.predicate AS predicate, a_dst.label AS object_label, COALESCE(asp.belief, 0.0) AS base_confidence, asp.observed_at AS observed_at, asp.provenance AS provenance_json, f.id AS fiber_id FROM fibers f JOIN atoms a_src ON a_src.id = f.src JOIN atoms a_dst ON a_dst.id = f.dst JOIN aspects asp ON asp.subject_kind='fiber' AND asp.subject_id=f.id WHERE a_src.label = %(label)s AND f.predicate = %(predicate)s AND COALESCE(asp.valid_from, '-infinity'::timestamptz) <= %(ts_from)s AND COALESCE(asp.valid_to,   'infinity'::timestamptz)  >  %(ts_to)s ORDER BY COALESCE(asp.belief, 0.0) DESC LIMIT 100
[CQL DEBUG] Params: {'label': 'FrameworkX', 'predicate': 'supports_tls', 'ts_from': datetime.datetime(2024, 12, 31, 12, 0, tzinfo=tzutc()), 'ts_to': datetime.datetime(2024, 12, 31, 12, 0, tzinfo=tzutc())}
[CQL DEBUG] Rows returned: 0
FF.........
ERROR: Coverage failure: total of 72 is less than fail-under=85

=================================== FAILURES ===================================
__________________________ test_cql_golden_asof_2025 ___________________________

    def test_cql_golden_asof_2025():
        g = load_golden("cql_asof_2025.json")
        out = cql(g["query"])
>       assert "results" in out and len(out["results"]) >= 1
E       AssertionError: assert ('results' in {'explain': {'steps': [{'extra': {}, 'ms': 0.0002609999967262411, 'name': 'ann_shortlist'}, {'extra': {'asof': '2025-0...averse'}, {'extra': {'items': 0}, 'ms': 0.0, 'name': 'belief_compute'}], 'total_ms': 8.377277999983335}, 'results': []} and 0 >= 1)
E        +  where 0 = len([])

tests/test_cql_executor.py:17: AssertionError
_______________________ test_cql_golden_belief_threshold _______________________

    def test_cql_golden_belief_threshold():
        g = load_golden("cql_belief_097.json")
        out = cql(g["query"])
>       assert "results" in out and len(out["results"]) >= 1
E       AssertionError: assert ('results' in {'explain': {'steps': [{'extra': {}, 'ms': 0.00021099998548379517, 'name': 'ann_shortlist'}, {'extra': {'asof': '2025-...averse'}, {'extra': {'items': 0}, 'ms': 0.0, 'name': 'belief_compute'}], 'total_ms': 9.544567000006055}, 'results': []} and 0 >= 1)
E        +  where 0 = len([])

tests/test_cql_executor.py:38: AssertionError
__________________________ test_cql_golden_asof_2024 ___________________________

    def test_cql_golden_asof_2024():
        g = load_golden("cql_asof_2024.json")
        out = cql(g["query"])
>       assert "results" in out and len(out["results"]) >= 1
E       AssertionError: assert ('results' in {'explain': {'steps': [{'extra': {}, 'ms': 0.00010000002248489182, 'name': 'ann_shortlist'}, {'extra': {'asof': '2024-...averse'}, {'extra': {'items': 0}, 'ms': 0.0, 'name': 'belief_compute'}], 'total_ms': 8.633519999989403}, 'results': []} and 0 >= 1)
E        +  where 0 = len([])

tests/test_cql_executor.py:55: AssertionError
_______________________ test_tls_supersession_asof_split _______________________

    def test_tls_supersession_asof_split():
        pre = datetime(2024, 12, 31, 12, 0, 0, tzinfo=UTC)
        post = datetime(2025, 1, 1, 12, 0, 0, tzinfo=UTC)
    
        pre_label = tls_supported_as_of("FrameworkX", pre)
        post_label = tls_supported_as_of("FrameworkX", post)
    
>       assert pre_label == "TLS1.2"
E       AssertionError: assert None == 'TLS1.2'

tests/test_demo_query.py:15: AssertionError
================================ tests coverage ================================
_______________ coverage: platform linux, python 3.12.11-final-0 _______________

Name                       Stmts   Miss  Cover   Missing
--------------------------------------------------------
cns_py/cql/belief.py          36      5    86%   19, 21, 23-24, 31
cns_py/cql/contradict.py      68      1    99%   249
cns_py/cql/executor.py       108     10    91%   101, 108-115, 125-126, 130-131, 146
cns_py/cql/parser.py          64     10    84%   44-48, 55, 62, 69-70, 73, 87
cns_py/cql/planner.py         39     39     0%   1-54
cns_py/demo/ingest.py         33     33     0%   1-107
cns_py/demo/query.py          23      8    65%   29, 34-41, 45
cns_py/storage/db.py          33     13    61%   77-80, 84-93, 97
--------------------------------------------------------
TOTAL                        432    119    72%

5 files skipped due to complete coverage.
Coverage HTML written to dir htmlcov
Coverage XML written to file coverage.xml
FAIL Required test coverage of 85% not reached. Total coverage: 72.45%
============================ Hypothesis Statistics =============================
tests/test_parser_property.py::test_parse_defaults:

  - during generate phase (0.21 seconds):
    - Typical runtimes: < 1ms, of which < 1ms in data generation
    - 100 passing examples, 0 failing examples, 0 invalid examples

  - Stopped because settings.max_examples=100


tests/test_parser_property.py::test_parse_combinations:

  - during generate phase (0.13 seconds):
    - Typical runtimes: ~ 0-1 ms, of which < 1ms in data generation
    - 100 passing examples, 0 failing examples, 0 invalid examples

  - Stopped because settings.max_examples=100


tests/test_parser_property.py::test_parse_timestamp_roundtrip:

  - during generate phase (0.13 seconds):
    - Typical runtimes: ~ 0-1 ms, of which < 1ms in data generation
    - 100 passing examples, 0 failing examples, 0 invalid examples

  - Stopped because settings.max_examples=100


tests/test_parser_property.py::test_parse_belief_threshold:

  - during generate phase (0.11 seconds):
    - Typical runtimes: < 1ms, of which < 1ms in data generation
    - 100 passing examples, 0 failing examples, 0 invalid examples

  - Stopped because settings.max_examples=100


tests/test_parser_property.py::test_parse_full_query:

  - during generate phase (0.21 seconds):
    - Typical runtimes: ~ 1ms, of which ~ 0-1 ms in data generation
    - 100 passing examples, 0 failing examples, 0 invalid examples

  - Stopped because settings.max_examples=100


=========================== short test summary info ============================
FAILED tests/test_cql_executor.py::test_cql_golden_asof_2025 - AssertionError: assert ('results' in {'explain': {'steps': [{'extra': {}, 'ms': 0.0002609999967262411, 'name': 'ann_shortlist'}, {'extra': {'asof': '2025-0...averse'}, {'extra': {'items': 0}, 'ms': 0.0, 'name': 'belief_compute'}], 'total_ms': 8.377277999983335}, 'results': []} and 0 >= 1)
 +  where 0 = len([])
FAILED tests/test_cql_executor.py::test_cql_golden_belief_threshold - AssertionError: assert ('results' in {'explain': {'steps': [{'extra': {}, 'ms': 0.00021099998548379517, 'name': 'ann_shortlist'}, {'extra': {'asof': '2025-...averse'}, {'extra': {'items': 0}, 'ms': 0.0, 'name': 'belief_compute'}], 'total_ms': 9.544567000006055}, 'results': []} and 0 >= 1)
 +  where 0 = len([])
FAILED tests/test_cql_executor.py::test_cql_golden_asof_2024 - AssertionError: assert ('results' in {'explain': {'steps': [{'extra': {}, 'ms': 0.00010000002248489182, 'name': 'ann_shortlist'}, {'extra': {'asof': '2024-...averse'}, {'extra': {'items': 0}, 'ms': 0.0, 'name': 'belief_compute'}], 'total_ms': 8.633519999989403}, 'results': []} and 0 >= 1)
 +  where 0 = len([])
FAILED tests/test_demo_query.py::test_tls_supersession_asof_split - AssertionError: assert None == 'TLS1.2'
Error: Process completed with exit code 1.